* {
  box-sizing: border-box;
  /* margin: 0;
  padding: 0; */
}
body {
  background-color: #09f;
}
/* .container {
  background-color: #fff;
  color: #000;
  width: 150px;
  height: 150px;
  padding: 10px;
  font-size: 36px;
  /*Desbordamiento solucionar: visible(default)hidden,scroll,auto (barras de desplazamiento)*/
/* overflow: hidden; */
/*evitar información: eliipsis (puntos suspensivos),clip (default)*/
/* text-overflow: ellipsis; */
/* }  */

/*POSITION: relative -> Para posicionar correctamente
static -> default
absolute -> absoluto -> coordenadas del elemento
relative -> relativo -> creando un punto relativo para que cualquiera de los contenedores hijos pueda tomarlo como referencia.
fixed -> El elemento queda fijo en la pantalla, no es necesario usar el relative.
sticky -> El elemento queda pegado al contenedor en el que se encuentra.
z-index -> eje Z de profundidad los elementos ocupan un espacio (contexto de apilamiento), elementos quedan delante o por detrás del contenido.

Formas de centrar un div:
-inset: 0;
-margin: auto;

*/

/* .parent {
  border: 5px solid #000;
  width: 250px;
  height: 500px;
  /*Punto de referencia para cualquier container*/
/* position: relative; */
/* } */
/* .container2 {
  background: #09f;
  width: 150px;
  height: 150px;
  /*Posicionando relativamente desde la clase parent*/
/* position: fixed; */
/* right: 0; */
/*Posición eje Z*/
/* z-index: 2; */
/* }  */
/*USANDO UN Z-INDEX*/
/* div {
  border: 1px solid;
  opacity: .9;
  width: 200px;
  height: 200px;
  background: #09f;
  margin-top: -100px;
  box-shadow: 0 0 5px #000000dd;
  /*Para crear los z-index debe estar en position relative*/
/* position: relative; */
/* } */
/* div:first-child {
  background: yellow;
  z-index: 2;
}
div:nth-child(2) {
  background: blue;
  z-index: 1;
}
div:last-child {
  background: red;
  z-index: 3;
/* } */

/*USANDO FLEXBOX | DISPLAY:

- block -> Crea bloques con salto de línea y es default por lo tanto SI le afecta el ancho y el alto.
- inline -> Cada elemento va seguido del otro, NO hay un salto de línea, el alto y el ancho NO le afecta.
- flex -> Como debe de funcionar el contenedor respecto a sus hijos con diferentes direcciones (filas y columnas) EN FLEX SIEMPRE SE TRABAJA EN UN EJE HORIZONTAL O VERTICAL - EN FILAS O COLUMNAS. 
- flex-direction: Dirección del contendor (row,columns,column-reverse,row-reverse).
- direction: rtl(derecha a izquierda), ltr (izquierda a derecha).
- writing-mode: Lo mismo para las direcciónes vertical-lr(texto abajo) o vertical-rl(texto arrriba)
- flex-wrap: Default (nowrap - no hace un salto de línea para que quepa el contenido), wrap (si el contenido no cabe, realiza un salto de línea)

- flex-flow -> Abreviatura de nowrap y wrap (dirección wrap/nowrap)

COTROLAR ESPACIOS DE LOS ELEMENTOS:

VALORES POR DEFECTO:
- flex-grow: default (0 - los elementos pueden crecer)
- flex-shrink: default (1 - los elementos pueden reducir su tamaño a un tamaño más pequeño que su flex-basis).
- flex-basis: default (auto - los elementos tienen un tamaño base en auto)
Forma abreviada -> flex: 1; -> referencia relativa de cuanto tiene que tomar respecto al padre (Proporción de cada una).

CAMBIAR EL ORDEN EN COMO SE VEN LOS ELEMENTOS VISUALMENTE:
- order -> Ordenar los elementos de acuerdo al número que se le asigne.

POSICIONAR ELEMENTOS CON JUSTIFY-CONTENT:
Es la parte más compleja de flexbox ya que requiere alinear los elementos.

*/

.parent {
  display: flex;
  flex-flow: row nowrap;
  border: 4px solid;
  width: 250px;
  height: 400px;
}
.item {
  border: 1px solid;
  opacity: 0.9;
  width: 50px;
  height: 50px;
}
.item:first-child {
  background: yellow;
}
.item:nth-child(2) {
  background: blue;
}
.item:last-child {
  background: orangered;
}
